#!/bin/bash

## NOTES
# - Check into TLD Check with hostdime.co.uk
## END NOTES

source /dev/stdin <<<"$(< <(curl -ks https://codesilo.dimenoc.com/caseym/triton/raw/master/loader))"

echo ""
init_table -h0 -m40 -f "DNS Check - Script Status"
add_row -C 1 -T "$Color_Yellow" "[In Progress]" "Information Section"
add_row -C 1 -T "$Color_Yellow" "[In Progress]" "Parent Section"
add_row -C 1 -T "$Color_Yellow" "[In Progress]" "Nameserver Section"
add_row -C 1 -T "$Color_Yellow" "[In Progress]" "SOA Section"
add_row -C 1 -T "$Color_Yellow" "[In Progress]" "MX Section"
add_row -C 1 -T "$Color_Green" "[Complete]" "WWW Section"
print_table

function DNSCheck_Full() {
  if [[ "$Global_DomainCheck_Domain" == "" ]]; then
    Global_DomainCheck
  fi
#  DNSCheck_Overview
  DNSCheck_Parent
  DNSCheck_NS
  DNSCheck_SOA
  DNSCheck_MX
  DNSCheck_WWW
}
function DNSCheck_Overview() {
init_table -m60 -f "DNS Check - Overview"
add_row "Parent" "NS" "SOA" "MX" "WWW"
add_row -C 1 -T "$Color_Green" -C 2 -T "$Color_Red" -C 3 -T "$Color_Yellow" -C 4 -T "$Color_Green" -C 5 -T "$Color_Green" "PASSED" "FAILED" "WARNING" "PASSED" "PASSED"
print_table
echo ""
}
function DNSCheck_Parent() {
  if [[ "$Global_DomainCheck_Domain" == "" ]]; then
    Global_DomainCheck
  fi
  DNSCheck_Registrar=$(whois -H "$Global_DomainCheck_Domain" | grep "Registrar:" | sed -e 's/^[ \t]*//' | cut -d " " -f2-);
  DNSCheck_GlobalServer=$(dig ns +short "$Global_DomainCheck_Domain_TLD" | head -1);
  DNSCheck_NS=$(dig ns +short "$Global_DomainCheck_Domain" | sort | sed s'/[.]$//' | sed -e :a -e '$!N; s/\n/ | /; ta');
  init_table -h0 -m40 -f "DNS Check - Information"
  add_row "[--]" "Domain Checked: $Global_DomainCheck_Domain"
  if [[ -n "$DNSCheck_Registrar" ]]; then
    if [[ "$Global_DomainCheck_Domain_TLD" == "UK"  ]]; then
      DNSCheck_Registrar=$(whois -H "$Global_DomainCheck_Domain" | grep -A 1 "Registrar:" | tail -n 1 | sed -e 's/^[ \t]*//' | sed -e 's/\[[^][]*\]//g');
      add_row "[--]" "Domain Registrar: $DNSCheck_Registrar"
    else
      add_row "[--]" "Domain Registrar: $DNSCheck_Registrar"
    fi
  fi
  add_row "[--]" "Parent Server: $DNSCheck_GlobalServer"
  print_table
  echo ""
  init_table -h0 -m40 -f "DNS Check - Parent"
  add_row "[--]" "Global Nameservers: $DNSCheck_NS"
  if [[ -n "$DNSCheck_GlobalServer" ]]; then
    add_row -C 1 -T "$Color_Green" "[OK]" "TLD Parent Check"
  else
    add_row -C 1 -T "$Color_Red" "[!!]" "Parent Nameservers Missing TLD Information"
  fi
  if [[ "$Global_DomainCheck_Status" == "Invalid" ]]; then
    add_row -C 1 -T "$Color_Red" "[!!]" "Domain is Invalid"
  elif [[ "$Global_DomainCheck_Status" == "Unregistered" ]]; then
    add_row -C 1 -T "$Color_Red" "[!!]" "Domain is NOT Registered"
  elif [[ "$Global_DomainCheck_Status" == "Registered" ]]; then
    add_row -C 1 -T "$Color_Green" "[OK]" "Domain Registered"
    if [[ $DNSCheck_NS != "" ]]; then
      if [ -n "$DNSCheck_NS" ]; then
        add_row -C 1 -T "$Color_Green" "[OK]" "Global Nameservers Returned"
      else
        add_row -C 1 -T "$Color_Red" "[!!]" "Global Nameservers Missing"
      fi
    fi
    DNSCheck_NS_Glue=$(dig @"$DNSCheck_GlobalServer" +noall +additional "$Global_DomainCheck_Domain" | awk -F "A" '{print $NF}' | awk '{$1=$1}{ print}');
    if [[ -n "$DNSCheck_NS_Glue" ]]; then
      DNSCheck_NS_Compare=$(dig ns +short "$Global_DomainCheck_Domain" | sort)
      DNSCheck_NS_Glue_Compare=$(dig @"$DNSCheck_GlobalServer" +noall +additional "$Global_DomainCheck_Domain" | awk -F " " '{print $1}' | awk '{$1=$1}{ print}' | sort);
      if [[ "$DNSCheck_NS_Compare" == "$DNSCheck_NS_Glue_Compare" ]]; then
	  DNSCheck_NS_Count=$(dig ns +short "$Global_DomainCheck_Domain" | wc -l);  # Global Name Servers 1
      DNSCheck_NS_Glue_Count=$(echo "$DNSCheck_NS_Glue" | wc -l);
	  if [[ "$DNSCheck_NS_Count" == "$DNSCheck_NS_Glue_Count" ]]; then
          add_row -C 1 -T "$Color_Green" "[OK]" "Global Nameservers (A Records) Returned"
        else
          add_row -C 1 -T "$Color_Red" "[!!]" "Global Nameservers (Glue Records) Incomplete"
        fi
        add_row -C 1 -T "$Color_Green" "[OK]" "Global Nameservers (Glue Records) Returned"
      else
        add_row -C 1 -T "$Color_Yellow" "[??]" "Global Nameservers (Glue Records) Not All Returned"
      fi
    else
      add_row -C 1 -T "$Color_Red" "[!!]" "Global Nameservers Not Registered"
    fi      
  fi
  print_table
  echo ""
}
function DNSCheck_NS() {
  if [[ "$Global_DomainCheck_Domain" == "" ]]; then
    Global_DomainCheck
  fi
}
function DNSCheck_SOA() {
  if [[ "$Global_DomainCheck_Domain" == "" ]]; then
    Global_DomainCheck
  fi
  DNSCheck_SOA_Check=$(dig +short soa "$Global_DomainCheck_Domain");
  init_table -h0 -m40 -f "DNS Check - SOA"
  if [[ -n "$DNSCheck_SOA_Check" ]]; then
    DNSCheck_SOA_PrimaryNS=$(dig +short soa "$Global_DomainCheck_Domain" | awk -F " " '{print $1}' | sed s'/[.]$//');
    DNSCheck_SOA_Hostmaster=$(dig +short soa "$Global_DomainCheck_Domain" | awk -F " " '{print $2}' | sed s'/[.]$//');
    DNSCheck_SOA_Serial=$(dig +short soa "$Global_DomainCheck_Domain" | awk -F " " '{print $3}');
    DNSCheck_SOA_Refresh=$(dig +short soa "$Global_DomainCheck_Domain" | awk -F " " '{print $4}');
    DNSCheck_SOA_Retry=$(dig +short soa "$Global_DomainCheck_Domain" | awk -F " " '{print $5}');
    DNSCheck_SOA_Expire=$(dig +short soa "$Global_DomainCheck_Domain" | awk -F " " '{print $6}');
    DNSCheck_SOA_TTL=$(dig +short soa "$Global_DomainCheck_Domain" | awk -F " " '{print $7}');
    add_row "[--]" "Primary Nameserver: $DNSCheck_SOA_PrimaryNS"
    add_row "[--]" "Hostmaster: $DNSCheck_SOA_Hostmaster"
    add_row "[--]" "Serial #: $DNSCheck_SOA_Serial"
    add_row "[--]" "Refresh: $DNSCheck_SOA_Refresh"
    add_row "[--]" "Retry: $DNSCheck_SOA_Retry"
    add_row "[--]" "Expire: $DNSCheck_SOA_Expire"
    add_row "[--]" "Minimum TTL: $DNSCheck_SOA_TTL"
    export IFS=" | "
    DNSCheck_NS=$(dig ns +short "$Global_DomainCheck_Domain" | sort | sed s'/[.]$//' | sed -e :a -e '$!N; s/\n/ | /; ta');
    for DNSCheck_NS_Temp in $DNSCheck_NS; do
      DNSCheck_NS_Temp=$(dig +short soa @"$DNSCheck_NS_Temp" "$Global_DomainCheck_Domain" | awk -F " " '{print $3}')
      if [[ "$DNSCheck_NS_Temp" == "$DNSCheck_SOA_Serial" ]]; then
        if [[ "$DNSCheck_NS_Temp_Status" != "Failed" ]]; then
          DNSCheck_NS_Temp_Status="Success"
        fi        
      else
        DNSCheck_NS_Temp_Status="Failed"
      fi
    done
    if [[ "$DNSCheck_NS_Temp_Status" == "Success" ]]; then
      add_row -C 1 -T "$Color_Green" "[OK]" "All Nameservers Report Same Serial #"
    else
      add_row -C 1 -T "$Color_Yellow" "[??]" "Nameservers Reported Different Serial #"
    fi   
    if [[ -n $(echo "$DNSCheck_NS" | grep "$DNSCheck_SOA_PrimaryNS") ]]; then
      add_row -C 1 -T "$Color_Green" "[OK]" "Primary Name Server Listed In Global Nameservers"
    else
      add_row -C 1 -T "$Color_Yellow" "[??]" "Primary Name Server Not Found In Global Nameservers"
    fi
    if [[ ${#DNSCheck_SOA_Serial} == 10 ]]; then
      DNSCheck_SOA_Serial_Format=$(dig +short soa "$Global_DomainCheck_Domain" | awk -F " " '{print $3}' | head -c2);
      if [[ "$DNSCheck_SOA_Serial_Format" -ge 19 && "$DNSCheck_SOA_Serial_Format" -le 20 ]]; then
        add_row -C 1 -T "$Color_Green" "[OK]" "Serial # Appears To Use Recommended Format: YYYYMMDDnn"
      else
        add_row -C 1 -T "$Color_Yellow" "[??]" "Serial # Format Recommended: YYYYMMDDnn"
      fi
    else
      add_row -C 1 -T "$Color_Yellow" "[??]" "Serial # Format Recommended: YYYYMMDDnn"
    fi
    if [[ "$DNSCheck_SOA_Refresh" != 86400 ]]; then
      add_row -C 1 -T "$Color_Green" "[OK]" "Refresh Interval Set to Recommended Value"
    else
      add_row -C 1 -T "$Color_Yellow" "[??]" "Refresh Interval Recommendation: 86400 Seconds (24 Hours)"
    fi    
    if [[ "$DNSCheck_SOA_Retry" == 7200 ]]; then
      add_row -C 1 -T "$Color_Green" "[OK]" "Retry Interval Set to Recommended Value"
    else
      add_row -C 1 -T "$Color_Yellow" "[??]" "Retry Interval Recommendation: 7200 Seconds (2 Hours)"
    fi
    if [[ "$DNSCheck_SOA_Retry" > "$DNSCheck_SOA_Refresh" ]]; then
      add_row -C 1 -T "$Color_Green" "[OK]" "Retry Interval Less Than Refresh Interval"
    else
      add_row -C 1 -T "$Color_Yellow" "[??]" "Retry Interval Recommended Less Than $DNSCheck_SOA_Refresh"
    fi
    if [[ "$DNSCheck_SOA_Expire" -le 2419200 ]]; then
      add_row -C 1 -T "$Color_Green" "[OK]" "Expire Interval Within 2419200 (672 Hours)"
    else
      add_row -C 1 -T "$Color_Yellow" "[??]" "Expire Interval Higher Than 2419200 (672 Hours)"
    fi
    if [[ "$DNSCheck_SOA_TTL" -ge 180 && "$DNSCheck_SOA_TTL" -le 172800 ]]; then
      add_row -C 1 -T "$Color_Green" "[OK]" "Minimum TTL Interval Between 180-172800 (3 Min – 2 Days)"
    else
      add_row -C 1 -T "$Color_Yellow" "[??]" "Minimum TTL Recommended Between 180-172800 (3 Min – 2 Days)"
    fi    
  else
    add_row -C 1 -T "$Color_Red" "Missing SOA Record"
  fi  
  print_table
  echo ""
}
function DNSCheck_MX() {
  if [[ "$Global_DomainCheck_Domain" == "" ]]; then
    Global_DomainCheck
  fi
  DNSCheck_MX=$(dig +noall +answer mx "$Global_DomainCheck_Domain" | awk -F " " '{print $NF}' | sort | sed s'/[.]$//' | sed -e :a -e '$!N; s/\n/ | /; ta');
  DNSCheck_A=$(dig +noall +answer "$Global_DomainCheck_Domain" | grep -v CNAME | awk '{print $NF}');
  init_table -h0 -m40 -f "DNS Check - MX"
  if [[ -n "$DNSCheck_MX" ]]; then
    DNSCheck_MX_PTR=$(dig -x $DNSCheck_A | grep -A 1 "ANSWER SECTION:" | tail -n 1 | awk -F " " '{print $NF}' | sed s'/[.]$//');
    if [[ -n "$(echo "$DNSCheck_MX" | grep "alt1.aspmx.l.google.com")" ]]; then
     DNSCheck_MX_Short="G Suite"
    else
     DNSCheck_MX_Short="$DNSCheck_MX"
    fi
    add_row "[--]" "MX Record (Global): $DNSCheck_MX_Short"
    if [[ -n "DNSCheck_MX_PTR" ]]; then
      add_row "[--]" "PTR Record: $DNSCheck_MX_PTR"
    fi
    export IFS=" | "
    DNSCheck_NS=$(dig ns +short "$Global_DomainCheck_Domain" | sort | sed s'/[.]$//' | sed -e :a -e '$!N; s/\n/ | /; ta');
    for DNSCheck_NS_Temp in $DNSCheck_NS; do
      DNSCheck_MX_Temp=$(dig +noall +answer mx @"$DNSCheck_NS_Temp" "$Global_DomainCheck_Domain" | awk -F " " '{print $NF}' | sort | sed s'/[.]$//' | sed -e :a -e '$!N; s/\n/ | /; ta')
      if [[ "$DNSCheck_MX_Temp" == "$DNSCheck_MX" ]]; then
        if [[ "$DNSCheck_MX_Temp_Status" != "Failed" ]]; then
          DNSCheck_MX_Temp_Status="Success"
        fi        
      else
        DNSCheck_MX_Temp_Status="Failed"
      fi
    done
    if [[ "$DNSCheck_MX_Temp_Status" == "Success" ]]; then
      add_row -C 1 -T "$Color_Green" "[OK]" "All Nameservers Return The Same MX Records"
    else
      add_row -C 1 -T "$Color_Yellow" "[??]" "Nameservers Don't Return Same MX Records"
    fi
    if [[ -n "$(echo "$DNSCheck_MX" | grep "$Global_DomainCheck_Domain")" ]]; then
      add_row -C 1 -T "$Color_Green" "[OK]" "Local Mail Exchange Detected"
    else
      add_row -C 1 -T "$Color_Green" "[OK]" "Remote Mail Exchange Detected"
      DNSCheck_MX_Count=$(echo "${DNSCheck_MX}" | tr -cd ' | ' | wc -c);
      if [[ "$DNSCheck_MX_Count" -gt 1 ]]; then
        add_row -C 1 -T "$Color_Green" "[OK]" "Single MX Record Not Detected"
      else
        add_row -C 1 -T "$Color_Yellow" "[??]" "Single MX Record Detected"
      fi
    fi
    if [[ $DNSCheck_MX =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
      add_row -C 1 -T "$Color_Yellow" "[??]" "IP Address For MX Record Detected"
    else
      add_row -C 1 -T "$Color_Green" "[OK]" "MX Record Is Not An IP Address"
    fi
    if [[ -n "DNSCheck_MX_PTR" ]]; then
      add_row -C 1 -T "$Color_Green" "[OK]" "PTR Record Detected"
    else
      add_row -C 1 -T "$Color_Red" "[!!]" "PTR Record Not Found"
    fi
  else
    add_row -C 1 -T "$Color_Red" "Missing MX Record"
  fi
  print_table
  echo ""
}
function DNSCheck_WWW() {
  if [[ "$Global_DomainCheck_Domain" == "" ]]; then                                
    Global_DomainCheck
  fi
  DNSCheck_A_WWW=$(dig +noall +answer www."$Global_DomainCheck_Domain" | grep -v CNAME | awk '{print $NF}');
  DNSCheck_A=$(dig +noall +answer "$Global_DomainCheck_Domain" | awk '{print $NF}');  
  init_table -h0 -m40 -f "DNS Check - WWW"
  if [[ -n "$DNSCheck_A_WWW" ]]; then
    add_row "[--]" "WWW A Record: $DNSCheck_A_WWW"
    Global_CheckIP "$DNSCheck_A_WWW"
    if [[ "$Global_CheckIP_Result" == "Public" ]]; then
      add_row -C 1 -T "$Color_Green" "[OK]" "Public IP Check"
    else
      add_row -C 1 -T "$Color_Red" "[!!]" "A Record Is Private"
    fi
    if [[ "$DNSCheck_A" == "$DNSCheck_A_WWW" ]]; then
      add_row -C 1 -T "$Color_Green" "[OK]" "CNAME Record Check"
    else
      add_row -C 1 -T "$Color_Yellow" "[??]" "WWW Record vs A Record Mismatch"
    fi
  else
    add_row -C 1 -T "$Color_Red" "Missing WWW CNAME Record"
  fi
  print_table
  echo ""
}

DNSCheck_Full
